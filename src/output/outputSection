import React, { FC } from "react";
import { useEFSData } from "@dectech/react-library";
import { useSelector } from "react-redux";
import { OutputTypes } from "./outputSlice";
import { getActionLog } from "redux/reducers/actionLogStore/actionLogStore";
import { getOutput } from "./outputSelector";
import { getPageDurations } from "../redux/reducers/pageDurationStore/pageDurationStore";
import { store } from "../redux/store";

interface OutputLineProps {
  varname: string;
  value: string;
  label: string;
}

const OutputLine: FC<OutputLineProps> = ({ varname, value = "", label }) => {
  const { showOutput = true }: { showOutput?: boolean } = useEFSData();

  // if showing output, then show labels in clear way
  if (showOutput) {
    return (
      <div
        style={{
          display: "flex",
          flexDirection: "row",
          padding: "0px 0px 8px 8px",
        }}
      >
        {showOutput && label && <span style={{ width: "15em" }}>{label}</span>}
        <input
          type={showOutput ? "text" : "hidden"}
          id={varname}
          name={varname}
          value={value !== null ? value : ""}
          onChange={() => {}}
          style={{
            width: "80%",
          }}
          readOnly
        />
      </div>
    );
  }

  return (
    <input
      type="hidden"
      id={varname}
      name={varname}
      value={value !== null ? value : ""}
      onChange={() => {}}
      readOnly
    />
  );
};

/**
 * Component to display the needed output for this experiment
 */

export const OutputSection: FC = () => {
  const {
    outputCondition,
    outputSelectedItemId,
    outputItemOrderShown,
    outputNumberOfItemsShown,
    outputSkipCardPage,
    outputReachedBasket,
    outputEmptyBasket,
    outputTimeSpentPerPage,
    outputReduxDebug,
    outputActionLog,
  } = useEFSData();

  const outputByKey = useSelector(getOutput);
  let pageDurations = useSelector(getPageDurations);

  pageDurations = Object.keys(pageDurations).reduce((output, id) => {
    return { ...output, [id]: Math.round(pageDurations[id] / 10) / 100 };
  }, {});

  const reduxStores = useSelector((state: RootState) =>
    JSON.stringify({
      logic: state.logic,
      pageDuration: state.pageDuration,
      output: state.output,
      data: state.data,
    })
  );

  const actionLog = useSelector(getActionLog);
  return (
    <>
      <OutputLine
        varname={outputCondition}
        value={outputByKey(OutputTypes.condition)}
        label="condition"
      />
      <OutputLine
        varname={outputSelectedItemId}
        value={outputByKey(OutputTypes.selectedItemID)}
        label="selectedItemID"
      />
      <OutputLine
        varname={outputItemOrderShown}
        value={outputByKey(OutputTypes.itemOrderShown)}
        label="itemOrderShown"
      />
      <OutputLine
        varname={outputNumberOfItemsShown}
        value={outputByKey(OutputTypes.numberOfItemsShown)}
        label="numberOfItemsShown"
      />
      <OutputLine
        varname={outputSkipCardPage}
        value={outputByKey(OutputTypes.skipCardPage)}
        label="skipCardPage"
      />
      <OutputLine
        varname={outputReachedBasket}
        value={outputByKey(OutputTypes.reachedBasket)}
        label="reachedBasket"
      />
      <OutputLine
        varname={outputEmptyBasket}
        value={outputByKey(OutputTypes.emptyBasket)}
        label="emptyBasket"
      />
      <OutputLine
        varname={outputTimeSpentPerPage}
        value={JSON.stringify(pageDurations)}
        label="timeSpentPerPage"
      />
      <OutputLine
        varname={outputActionLog}
        value={actionLog}
        label="Action Log"
      />
      <OutputLine
        varname={outputReduxDebug}
        value={reduxStores}
        label="Redux Debug"
      />
    </>
  );
};
